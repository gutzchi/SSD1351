#include <mbed.h>
#include "SSD1351.h"

constexpr char BasicFont[][6] = {
  {0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x5F,0x00,0x00,0x00,0x00},
  {0x00,0x07,0x00,0x07,0x00,0x00},
  {0x14,0x7F,0x14,0x7F,0x14,0x00},
  {0x24,0x2A,0x7F,0x2A,0x12,0x00},
  {0x23,0x13,0x08,0x64,0x62,0x00},
  {0x36,0x49,0x55,0x22,0x50,0x00},
  {0x00,0x05,0x03,0x00,0x00,0x00},
  {0x1C,0x22,0x41,0x00,0x00,0x00},
  {0x41,0x22,0x1C,0x00,0x00,0x00},
  {0x08,0x2A,0x1C,0x2A,0x08,0x00},
  {0x08,0x08,0x3E,0x08,0x08,0x00},
  {0xA0,0x60,0x00,0x00,0x00,0x00},
  {0x08,0x08,0x08,0x08,0x08,0x00},
  {0x60,0x60,0x00,0x00,0x00,0x00},
  {0x20,0x10,0x08,0x04,0x02,0x00},
  {0x3E,0x51,0x49,0x45,0x3E,0x00},
  {0x00,0x42,0x7F,0x40,0x00,0x00},
  {0x62,0x51,0x49,0x49,0x46,0x00},
  {0x22,0x41,0x49,0x49,0x36,0x00},
  {0x18,0x14,0x12,0x7F,0x10,0x00},
  {0x27,0x45,0x45,0x45,0x39,0x00},
  {0x3C,0x4A,0x49,0x49,0x30,0x00},
  {0x01,0x71,0x09,0x05,0x03,0x00},
  {0x36,0x49,0x49,0x49,0x36,0x00},
  {0x06,0x49,0x49,0x29,0x1E,0x00},
  {0x00,0x36,0x36,0x00,0x00,0x00},
  {0x00,0xAC,0x6C,0x00,0x00,0x00},
  {0x08,0x14,0x22,0x41,0x00,0x00},
  {0x14,0x14,0x14,0x14,0x14,0x00},
  {0x41,0x22,0x14,0x08,0x00,0x00},
  {0x02,0x01,0x51,0x09,0x06,0x00},
  {0x32,0x49,0x79,0x41,0x3E,0x00},
  {0x7E,0x09,0x09,0x09,0x7E,0x00},
  {0x7F,0x49,0x49,0x49,0x36,0x00},
  {0x3E,0x41,0x41,0x41,0x22,0x00},
  {0x7F,0x41,0x41,0x22,0x1C,0x00},
  {0x7F,0x49,0x49,0x49,0x41,0x00},
  {0x7F,0x09,0x09,0x09,0x01,0x00},
  {0x3E,0x41,0x41,0x51,0x72,0x00},
  {0x7F,0x08,0x08,0x08,0x7F,0x00},
  {0x41,0x7F,0x41,0x00,0x00,0x00},
  {0x20,0x40,0x41,0x3F,0x01,0x00},
  {0x7F,0x08,0x14,0x22,0x41,0x00},
  {0x7F,0x40,0x40,0x40,0x40,0x00},
  {0x7F,0x02,0x0C,0x02,0x7F,0x00},
  {0x7F,0x04,0x08,0x10,0x7F,0x00},
  {0x3E,0x41,0x41,0x41,0x3E,0x00},
  {0x7F,0x09,0x09,0x09,0x06,0x00},
  {0x3E,0x41,0x51,0x21,0x5E,0x00},
  {0x7F,0x09,0x19,0x29,0x46,0x00},
  {0x26,0x49,0x49,0x49,0x32,0x00},
  {0x01,0x01,0x7F,0x01,0x01,0x00},
  {0x3F,0x40,0x40,0x40,0x3F,0x00},
  {0x1F,0x20,0x40,0x20,0x1F,0x00},
  {0x3F,0x40,0x38,0x40,0x3F,0x00},
  {0x63,0x14,0x08,0x14,0x63,0x00},
  {0x03,0x04,0x78,0x04,0x03,0x00},
  {0x61,0x51,0x49,0x45,0x43,0x00},
  {0x7F,0x41,0x41,0x00,0x00,0x00},
  {0x02,0x04,0x08,0x10,0x20,0x00},
  {0x41,0x41,0x7F,0x00,0x00,0x00},
  {0x04,0x02,0x01,0x02,0x04,0x00},
  {0x80,0x80,0x80,0x80,0x80,0x00},
  {0x01,0x02,0x04,0x00,0x00,0x00},
  {0x20,0x54,0x54,0x54,0x78,0x00},
  {0x7F,0x48,0x44,0x44,0x38,0x00},
  {0x38,0x44,0x44,0x28,0x00,0x00},
  {0x38,0x44,0x44,0x48,0x7F,0x00},
  {0x38,0x54,0x54,0x54,0x18,0x00},
  {0x08,0x7E,0x09,0x02,0x00,0x00},
  {0x18,0xA4,0xA4,0xA4,0x7C,0x00},
  {0x7F,0x08,0x04,0x04,0x78,0x00},
  {0x00,0x7D,0x00,0x00,0x00,0x00},
  {0x80,0x84,0x7D,0x00,0x00,0x00},
  {0x7F,0x10,0x28,0x44,0x00,0x00},
  {0x41,0x7F,0x40,0x00,0x00,0x00},
  {0x7C,0x04,0x18,0x04,0x78,0x00},
  {0x7C,0x08,0x04,0x7C,0x00,0x00},
  {0x38,0x44,0x44,0x38,0x00,0x00},
  {0xFC,0x24,0x24,0x18,0x00,0x00},
  {0x18,0x24,0x24,0xFC,0x00,0x00},
  {0x00,0x7C,0x08,0x04,0x00,0x00},
  {0x48,0x54,0x54,0x24,0x00,0x00},
  {0x04,0x7F,0x44,0x00,0x00,0x00},
  {0x3C,0x40,0x40,0x7C,0x00,0x00},
  {0x1C,0x20,0x40,0x20,0x1C,0x00},
  {0x3C,0x40,0x30,0x40,0x3C,0x00},
  {0x44,0x28,0x10,0x28,0x44,0x00},
  {0x1C,0xA0,0xA0,0x7C,0x00,0x00},
  {0x44,0x64,0x54,0x4C,0x44,0x00},
  {0x08,0x36,0x41,0x00,0x00,0x00},
  {0x00,0x7F,0x00,0x00,0x00,0x00},
  {0x41,0x36,0x08,0x00,0x00,0x00},
  {0x02,0x01,0x01,0x02,0x01,0x00},
  {0x02,0x05,0x05,0x02,0x00,0x00} 
};


SSD1351::SSD1351(SPI * spi_device, PinName CS, PinName DC, 
        PinName RST, PinName POWER, int powerDownState) :
        _spi(spi_device), _cs(CS, 1), _dc(DC, 0),
        _rst(RST, 1), _power(POWER, powerDownState),
        _width(SSD1351_DEFAULT_WIDTH), _height(SSD1351_DEFAULT_HEIGHT) {};

void SSD1351::writeCommand(const char command){
  _dc = 0;
  _cs = 0;
  _spi->write(command);
  _cs = 1;
}

void SSD1351::writeData(const char data){
  _dc = 1;
  _cs = 0;
  _spi->write(data);
  _cs = 1;
}

void SSD1351::writeData(char * data, const int size){
  _dc = 1;
  _cs = 0;
  _spi->write(data, size, nullptr, 0);
  _cs = 1;
}

void SSD1351::init(){
  _dc =0;
  _rst = 0 ; 
  rtos::ThisThread::sleep_for(1ms);    
  _rst = 1 ;
  rtos::ThisThread::sleep_for(1ms);
  
  // Initialization Sequence from Adafruit
  writeCommand(SSD1351_CMD_COMMANDLOCK);  // set command lock
  writeData(0x12);  
  writeCommand(SSD1351_CMD_COMMANDLOCK);  // set command lock
  writeData(0xB1);
  
  writeCommand(SSD1351_CMD_DISPLAYOFF);  		// 0xAE
  
  writeCommand(SSD1351_CMD_CLOCKDIV);  		// 0xB3
  writeCommand(0xF1);  						// 7:4 = Oscillator Frequency, 3:0 = CLK Div Ratio (A[3:0]+1 = 1..16)   
  
  writeCommand(SSD1351_CMD_MUXRATIO);
  writeData(127);
  
  writeCommand(SSD1351_CMD_SETREMAP);
  writeData(0x74);

  writeCommand(SSD1351_CMD_SETCOLUMN);
  writeData(0x00);
  writeData(0x7F);
  writeCommand(SSD1351_CMD_SETROW);
  writeData(0x00);
  writeData(0x5F);

  writeCommand(SSD1351_CMD_STARTLINE); 		// 0xA1
  writeData(_height);   // changed from _height to 0x80

  writeCommand(SSD1351_CMD_DISPLAYOFFSET); 	// 0xA2
  writeData(0x00);

  writeCommand(SSD1351_CMD_SETGPIO);
  writeData(0x00);
  
  writeCommand(SSD1351_CMD_FUNCTIONSELECT);
  writeData(0x01); // internal (diode drop)
  //writeData(0x01); // external bias

  writeCommand(SSD1351_CMD_PRECHARGE);  		// 0xB1
  writeCommand(0x32);

  writeCommand(SSD1351_CMD_VCOMH);  			// 0xBE
  writeCommand(0x05);

  writeCommand(SSD1351_CMD_NORMALDISPLAY);  	// 0xA6

  writeCommand(SSD1351_CMD_CONTRASTABC);
  writeData(0xC8); //0x8A   //0xC8)
  writeData(0x80);//0x51		//0x80
  writeData(0xC8);//	0x8A		//0xC8

  writeCommand(SSD1351_CMD_CONTRASTMASTER);
  writeData(0x0F);

  writeCommand(SSD1351_CMD_SETVSL);
  writeData(0xA0);
  writeData(0xB5);
  writeData(0x55);
  
  writeCommand(SSD1351_CMD_PRECHARGE2);
  writeData(0x01);
  
  writeCommand(SSD1351_CMD_DISPLAYON);		//--turn on oled panel   

  fillScreen(Black);
}

void SSD1351::setBorders(char x, char y, char width, char height){
  writeCommand(SSD1351_CMD_SETCOLUMN);
  writeData(x < _width ? x : width);
  writeData(x + width - 1 < _width ? x + width -1 : width);
  writeCommand(SSD1351_CMD_SETROW);
  writeData(y < _height ?  y : height);
  writeData(y + height - 1 < _height ? y + height -1  : height);
}


void SSD1351::fillScreen(uint16_t color){
  _bgColor = color;

  setBorders(0, 0, _width, _height);

  writeCommand(SSD1351_CMD_WRITERAM);

  for(int i = 0; i < (int)(_width * _height); i++){
    writeData(color >> 8);
    writeData(color);
  }
}

int SSD1351::writeString(const std::string& str, uint16_t color){
  //static int16_t buffer[6*6]; // Static to avoid using dynamic memory
  char tempx = _x, tempy = _y;

  for(auto c : str){
    if(tempx + 6 > _width || tempy + 8 > _height) return EPERM;
    if(c == '\n'){
      tempy += 8;
      tempx = _x;
      continue;
    }

    //a single char will be written to the display.
    setBorders(tempx, tempy, 6, 8);
    writeCommand(SSD1351_CMD_WRITERAM);

    char letter[6];
    memcpy(letter, BasicFont[c-32], 6);

    for(int i = 0; i < 8; i++){
      uint16_t pixel = 0;
      for(int j = 0; j < 6; j++){
        if((letter[j] >> i) & 0x01 != 0) pixel = color;
        else pixel = _bgColor;
        writeData(pixel >> 8);
        writeData(pixel);
      }
    }
    tempx += 6;
  }

  return 0;
}
